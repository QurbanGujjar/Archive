{"ast":null,"code":"var _jsxFileName = \"E:\\\\Geeks Valley\\\\React Native\\\\Web Github\\\\RandomNumber\\\\src\\\\pages\\\\random.js\";\nimport React, { Component } from \"react\";\nimport ColumnLables from \"../components/ColumnLables\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass random extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      randomNumArray: [],\n      consectiveNumbers: [],\n      FarrayOfObject: [],\n      finalArry: [],\n      myarr: [],\n      evenNumber: [],\n      oddNumber: [],\n      primeNumber: [],\n      inputColumnNumber: 1,\n      inputValue: 0,\n      initialValue: 0,\n      finalValue: 0,\n      inputEvenNumber: 0,\n      inputPrimeNumber: 0,\n      sumOfRandomNumber: 0,\n      Qe: 0,\n      Qo: 0,\n      percentageOfEven: 0,\n      percentageOfOdd: 0,\n      avgOfConsectiveNumbers: 0,\n      chanceOfNumberInSequence: 0,\n      chanceOfNumberInSequenceProb: 0,\n      chanceOfNumberSmallest: 0,\n      chanceOfNumberInSequenceSmallestProb: 0,\n      chanceOfNumberBiggest: 0,\n      chanceOfNumberInSequenceBiggestProb: 0\n    };\n\n    this.getRandonNumbers = noOfRandomNos => {\n      var arr = [];\n\n      while (arr.length < this.state.finalValue) {\n        var r = Math.floor(Math.random() * this.state.finalValue) + 5\n        /*this.state.initialValue*/\n        ;\n        if (arr.indexOf(r) === -1) arr.push(r);\n      }\n\n      var evens = arr.filter(number => number % 2 == 0 && number !== 0 && number >= this.state.inputEvenNumber);\n      const evenNumbersToPush = evens.slice(0, this.state.inputEvenNumber);\n      var primeNumbers = this.findPrimeNumber(arr);\n      const primeNumbersToPush = primeNumbers.slice(0, this.state.inputPrimeNumber);\n      var arrToPush = [];\n      evenNumbersToPush.forEach(element => {\n        arrToPush.push(element);\n      });\n      primeNumbersToPush.forEach(element => {\n        arrToPush.push(element);\n      });\n      var oldArray = arr.filter(x => !new Set(arrToPush).has(x));\n      arrToPush = arrToPush.slice(0, this.state.inputColumnNumber);\n      oldArray.forEach(element => {\n        if (arrToPush.length < noOfRandomNos) arrToPush.push(element);\n      });\n      let sortednumbers = arrToPush.sort((a, b) => a - b).join(\",\");\n      var arrayOfObject = [];\n      arrayOfObject.push(sortednumbers);\n      return arrayOfObject;\n    };\n\n    this.handleCahngeforRandom = val => {\n      var randomNoArrayTemp = [];\n      debugger;\n\n      for (let index = 0; index < this.state.inputValue; index++) {\n        randomNoArrayTemp.push(this.getRandonNumbers(this.state.inputColumnNumber));\n\n        if (randomNoArrayTemp.length == this.state.inputValue - 1) {\n          this.setState({\n            FarrayOfObject: randomNoArrayTemp\n          });\n          randomNoArrayTemp.forEach(element => {\n            var diffTemp = this.diff(element.split(','));\n            debugger;\n          });\n        }\n      }\n    };\n\n    this.avg = arr => {\n      let average = arr.reduce((a, b) => a + b, 0) / arr.length;\n      this.setState({\n        sumOfRandomNumber: parseInt(average)\n      });\n    };\n\n    this.diff = ary => {\n      var newA = [];\n\n      for (var i = 1; i < ary.length; i++) newA.push(ary[i] - ary[i - 1]);\n\n      const sumOfConsecutiveNos = newA.reduce((a, b) => a + b, 0);\n      const avgOfConsectiveNumberTemp = sumOfConsecutiveNos / newA.length || 0;\n      this.setState({\n        consectiveNumbers: newA.join(\",\"),\n        consective: newA,\n        avgOfConsectiveNumbers: avgOfConsectiveNumberTemp\n      });\n      return newA;\n    };\n\n    this.even = arr => {\n      let even = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n          even.push(arr[i]);\n        }\n\n        this.setState({\n          evenNumber: even.join(\",\")\n        });\n      }\n\n      let percentage = parseInt(even.length / arr.length * 100);\n      this.setState({\n        Qe: even.length,\n        percentageOfEven: percentage\n      }); // console.log(percentage);\n    };\n\n    this.odd = arr => {\n      let odd = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 !== 0) {\n          odd.push(arr[i]);\n        }\n\n        this.setState({\n          oddNumber: odd.join(\",\")\n        });\n      }\n\n      let percentage = parseInt(odd.length / arr.length * 100);\n      this.setState({\n        Qo: odd.length,\n        percentageOfOdd: percentage\n      });\n    };\n\n    this.findPrimeNumber = arr => {\n      let prime = [];\n      arr.forEach(num => {\n        var isNum = this.isPrime(num);\n\n        if (isNum && num >= this.state.inputPrimeNumber) {\n          prime.push(num);\n        }\n      });\n      return prime;\n    };\n\n    this.isPrime = num => {\n      for (var i = 2; i < num; i++) if (num % i === 0) return false;\n\n      return num > 1;\n    };\n\n    this.handleChangeForInput = e => {\n      this.setState({\n        inputValue: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleInitialValue = e => {\n      this.setState({\n        initialValue: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleFinalValue = e => {\n      this.setState({\n        finalValue: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleinputEvenNumber = e => {\n      this.setState({\n        inputEvenNumber: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleinputPrimeNumber = e => {\n      this.setState({\n        inputPrimeNumber: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleinputColumnNumber = e => {\n      this.setState({\n        inputColumnNumber: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleChanceOfNumberInSequence = e => {\n      this.setState({\n        chanceOfNumberInSequence: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleChanceOfNumberSmallest = e => {\n      this.setState({\n        chanceOfNumberInSequenceSmallest: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleChanceOfNumberBiggest = e => {\n      this.setState({\n        chanceOfNumberInSequenceBiggest: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.GetRangeOfNumbers = () => {\n      // console.log(this.state.finalValue,this.state.initialValue)\n      this.state.finalArry = [];\n\n      for (let i = this.state.initialValue; i <= this.state.finalValue; i++) {\n        this.state.finalArry.push(Math.floor(Math.random() * this.state.finalValue) + 5\n        /*this.state.initialValue*/\n        );\n      } // console.log(Math.random() * (this.state.finalValue - this.state.initialValue) + this.state.initialValue);\n\n\n      this.setState(this.state.finalArry); // console.log(this.state.finalArry);\n    };\n  }\n\n  checkPrime(number) {\n    // console.log(number);\n    if (number <= 1) {\n      return false;\n    } else {\n      for (let k = 2; k < number; k++) {\n        if (number % k == 0) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  kPresentProbability(a, n, k) {\n    let count = 0;\n\n    for (let i = 0; i < n; i++) if (a[i] == k) count += 1; // find probability\n\n\n    this.setState({\n      chanceOfNumberInSequenceProb: count / n\n    });\n  }\n\n  smallestProb(a, n, k) {\n    let count = 0;\n\n    for (let i = 0; i < n; i++) if (Math.min(...a) == k) count += 1; // find probability\n\n\n    this.setState({\n      chanceOfNumberInSequenceSmallestProb: count / n\n    });\n  }\n\n  biggestProb(a, n, k) {\n    let count = 0;\n\n    for (let i = 0; i < n; i++) if (Math.max(...a) == k) count += 1; // find probability\n\n\n    this.setState({\n      chanceOfNumberInSequenceBiggestProb: count / n\n    });\n  }\n\n  render() {\n    const {\n      randomNumArray,\n      consectiveNumbers,\n      avgOfConsectiveNumbers,\n      evenNumber,\n      oddNumber,\n      primeNumber,\n      inputValue,\n      initialValue,\n      finalValue,\n      chanceOfNumberInSequence,\n      chanceOfNumberInSequenceProb,\n      chanceOfNumberInSequenceSmallest,\n      chanceOfNumberInSequenceSmallestProb,\n      chanceOfNumberInSequenceBiggest,\n      chanceOfNumberInSequenceBiggestProb,\n      sumOfRandomNumber,\n      Qe,\n      percentageOfEven,\n      Qo,\n      percentageOfOdd\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingTop: \"2rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Select Range of numbers :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Select initial number :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          onChange: this.handleInitialValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Select Final number :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          onChange: this.handleFinalValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"How many Column number do you want :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: this.handleinputColumnNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \" how many rows/ sequences/ series do you want?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: this.handleChangeForInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"How many even numbers do you want (At least):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), this.state.inputColumnNumber == 1 ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        disabled: true,\n        onChange: this.handleinputEvenNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 45\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: this.handleinputEvenNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 122\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"How many Prime numbers do you want (At least):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), this.state.inputColumnNumber == 1 ? /*#__PURE__*/_jsxDEV(\"input\", {\n        disabled: true,\n        type: \"number\",\n        onChange: this.handleinputPrimeNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 44\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: this.handleinputPrimeNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 122\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleCahngeforRandom(inputValue),\n        children: \"Get Resultsnpx\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), \" Random Number :\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), this.state.FarrayOfObject && this.state.FarrayOfObject.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Row No : \", index + 1, \" -----\", \">\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 39\n            }, this), item.map((num, ind) => {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [num, \" \", \", \"]\n              }, ind, true, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 26\n              }, this);\n            })]\n          }, item[index], true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default random;","map":{"version":3,"names":["React","Component","ColumnLables","random","state","randomNumArray","consectiveNumbers","FarrayOfObject","finalArry","myarr","evenNumber","oddNumber","primeNumber","inputColumnNumber","inputValue","initialValue","finalValue","inputEvenNumber","inputPrimeNumber","sumOfRandomNumber","Qe","Qo","percentageOfEven","percentageOfOdd","avgOfConsectiveNumbers","chanceOfNumberInSequence","chanceOfNumberInSequenceProb","chanceOfNumberSmallest","chanceOfNumberInSequenceSmallestProb","chanceOfNumberBiggest","chanceOfNumberInSequenceBiggestProb","getRandonNumbers","noOfRandomNos","arr","length","r","Math","floor","indexOf","push","evens","filter","number","evenNumbersToPush","slice","primeNumbers","findPrimeNumber","primeNumbersToPush","arrToPush","forEach","element","oldArray","x","Set","has","sortednumbers","sort","a","b","join","arrayOfObject","handleCahngeforRandom","val","randomNoArrayTemp","index","setState","diffTemp","diff","split","avg","average","reduce","parseInt","ary","newA","i","sumOfConsecutiveNos","avgOfConsectiveNumberTemp","consective","even","percentage","odd","prime","num","isNum","isPrime","handleChangeForInput","e","target","value","handleInitialValue","handleFinalValue","handleinputEvenNumber","handleinputPrimeNumber","handleinputColumnNumber","handleChanceOfNumberInSequence","handleChanceOfNumberSmallest","chanceOfNumberInSequenceSmallest","handleChanceOfNumberBiggest","chanceOfNumberInSequenceBiggest","GetRangeOfNumbers","checkPrime","k","kPresentProbability","n","count","smallestProb","min","biggestProb","max","render","paddingTop","map","item","ind"],"sources":["E:/Geeks Valley/React Native/Web Github/RandomNumber/src/pages/random.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport ColumnLables from \"../components/ColumnLables\";\r\n\r\nclass random extends Component {\r\n  state = {\r\n    randomNumArray: [],\r\n    consectiveNumbers: [],\r\n    FarrayOfObject: [],\r\n    finalArry: [],\r\n    myarr: [],\r\n    evenNumber: [],\r\n    oddNumber: [],\r\n    primeNumber: [],\r\n    inputColumnNumber: 1,\r\n    inputValue: 0,\r\n    initialValue: 0,\r\n    finalValue: 0,\r\n    inputEvenNumber: 0,\r\n    inputPrimeNumber: 0,\r\n    sumOfRandomNumber: 0,\r\n    Qe: 0,\r\n    Qo: 0,\r\n    percentageOfEven: 0,\r\n    percentageOfOdd: 0,\r\n    avgOfConsectiveNumbers: 0,\r\n    chanceOfNumberInSequence: 0,\r\n    chanceOfNumberInSequenceProb: 0,\r\n    chanceOfNumberSmallest: 0,\r\n    chanceOfNumberInSequenceSmallestProb: 0,\r\n    chanceOfNumberBiggest: 0,\r\n    chanceOfNumberInSequenceBiggestProb: 0,\r\n  };\r\n\r\n  checkPrime(number) {\r\n    // console.log(number);\r\n    if (number <= 1) {\r\n      return false;\r\n    } else {\r\n      for (let k = 2; k < number; k++) {\r\n        if (number % k == 0) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n\r\n  getRandonNumbers = (noOfRandomNos) => {\r\n    var arr = [];\r\n    while (arr.length < this.state.finalValue ) {\r\n      var r = Math.floor(Math.random() * this.state.finalValue ) + 5/*this.state.initialValue*/;\r\n      if (arr.indexOf(r) === -1) arr.push(r);\r\n    }\r\n    var evens = arr.filter(number => number % 2 == 0 && number !== 0 && number >= this.state.inputEvenNumber);\r\n    const evenNumbersToPush = evens.slice(0,this.state.inputEvenNumber);\r\n    var primeNumbers = this.findPrimeNumber(arr);\r\n    const primeNumbersToPush = primeNumbers.slice(0, this.state.inputPrimeNumber);\r\n    var arrToPush = [];\r\n    evenNumbersToPush.forEach(element => {\r\n      arrToPush.push(element)\r\n    });\r\n    primeNumbersToPush.forEach(element => {\r\n      arrToPush.push(element)\r\n    });\r\n\r\n    var oldArray = arr.filter( x => ! new Set(arrToPush).has(x) )\r\n    arrToPush = arrToPush.slice(0, this.state.inputColumnNumber);\r\n    oldArray.forEach(element => {\r\n      if (arrToPush.length < noOfRandomNos)\r\n        arrToPush.push(element)\r\n    });\r\n    let sortednumbers = arrToPush.sort((a, b) => a - b).join(\",\");\r\n   \r\n    var arrayOfObject = [];\r\n    arrayOfObject.push(sortednumbers)\r\n    return arrayOfObject;\r\n  }\r\n\r\n  handleCahngeforRandom = (val) => {\r\n    var randomNoArrayTemp=[];\r\n    debugger\r\n   for (let index = 0; index < this.state.inputValue; index++) {\r\n    randomNoArrayTemp.push(this.getRandonNumbers(this.state.inputColumnNumber));\r\n    if(randomNoArrayTemp.length==this.state.inputValue-1)\r\n    {\r\n      this.setState({ FarrayOfObject: randomNoArrayTemp })\r\n      randomNoArrayTemp.forEach(element => {\r\n        var diffTemp=this.diff(element.split(','));\r\n        debugger\r\n      });\r\n    }\r\n  \r\n   }  \r\n  };\r\n\r\n  //  lableF=()=>{\r\n  //   for (let index = 0; index <this.state.inputColumnNumber; index++) {\r\n  //       <span>{index} </span>\r\n\r\n  //   }\r\n\r\n  avg = (arr) => {\r\n    let average = arr.reduce((a, b) => a + b, 0) / arr.length;\r\n    this.setState({ sumOfRandomNumber: parseInt(average) });\r\n  };\r\n\r\n  diff = (ary) => {\r\n    var newA = [];\r\n    for (var i = 1; i < ary.length; i++) newA.push(ary[i] - ary[i - 1]);\r\n    const sumOfConsecutiveNos = newA.reduce((a, b) => a + b, 0);\r\n    const avgOfConsectiveNumberTemp = sumOfConsecutiveNos / newA.length || 0;\r\n    this.setState({\r\n      consectiveNumbers: newA.join(\",\"),\r\n      consective: newA,\r\n      avgOfConsectiveNumbers: avgOfConsectiveNumberTemp,\r\n    });\r\n    return newA;\r\n  };\r\n\r\n  even = (arr) => {\r\n    let even = [];\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i] % 2 === 0) {\r\n        even.push(arr[i]);\r\n      }\r\n      this.setState({ evenNumber: even.join(\",\") });\r\n    }\r\n    let percentage = parseInt((even.length / arr.length) * 100);\r\n    this.setState({ Qe: even.length, percentageOfEven: percentage });\r\n    // console.log(percentage);\r\n  };\r\n  odd = (arr) => {\r\n    let odd = [];\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i] % 2 !== 0) {\r\n        odd.push(arr[i]);\r\n      }\r\n      this.setState({ oddNumber: odd.join(\",\") });\r\n    }\r\n    let percentage = parseInt((odd.length / arr.length) * 100);\r\n    this.setState({ Qo: odd.length, percentageOfOdd: percentage });\r\n  };\r\n\r\n  findPrimeNumber = (arr) => {\r\n    let prime = [];\r\n    arr.forEach((num) => {\r\n      var isNum = this.isPrime(num);\r\n      if (isNum && num >= this.state.inputPrimeNumber) {\r\n        prime.push(num);\r\n      }\r\n    });\r\n    return prime;\r\n  };\r\n\r\n  isPrime = (num) => {\r\n    for (var i = 2; i < num; i++) if (num % i === 0) return false;\r\n    return num > 1;\r\n  };\r\n\r\n  handleChangeForInput = (e) => {\r\n    this.setState({ inputValue: parseInt(e.target.value) }, () => { });\r\n  };\r\n  handleInitialValue = (e) => {\r\n    this.setState({ initialValue: parseInt(e.target.value) }, () => { });\r\n  };\r\n  handleFinalValue = (e) => {\r\n    this.setState({ finalValue: parseInt(e.target.value) }, () => { });\r\n  };\r\n\r\n  handleinputEvenNumber = (e) => {\r\n    this.setState({ inputEvenNumber: parseInt(e.target.value) }, () => { });\r\n  };\r\n  handleinputPrimeNumber = (e) => {\r\n    this.setState({ inputPrimeNumber: parseInt(e.target.value) }, () => { });\r\n  };\r\n  // handleinputColumnNumber\r\n  handleinputColumnNumber = (e) => {\r\n    this.setState({ inputColumnNumber: parseInt(e.target.value) }, () => { });\r\n  };\r\n\r\n  handleChanceOfNumberInSequence = (e) => {\r\n    this.setState(\r\n      { chanceOfNumberInSequence: parseInt(e.target.value) },\r\n      () => { }\r\n    );\r\n  };\r\n\r\n  handleChanceOfNumberSmallest = (e) => {\r\n    this.setState(\r\n      { chanceOfNumberInSequenceSmallest: parseInt(e.target.value) },\r\n      () => { }\r\n    );\r\n  };\r\n  handleChanceOfNumberBiggest = (e) => {\r\n    this.setState(\r\n      { chanceOfNumberInSequenceBiggest: parseInt(e.target.value) },\r\n      () => { }\r\n    );\r\n  };\r\n\r\n  kPresentProbability(a, n, k) {\r\n    let count = 0;\r\n    for (let i = 0; i < n; i++) if (a[i] == k) count += 1;\r\n\r\n    // find probability\r\n    this.setState({ chanceOfNumberInSequenceProb: count / n });\r\n  }\r\n  smallestProb(a, n, k) {\r\n    let count = 0;\r\n    for (let i = 0; i < n; i++) if (Math.min(...a) == k) count += 1;\r\n\r\n    // find probability\r\n    this.setState({ chanceOfNumberInSequenceSmallestProb: count / n });\r\n  }\r\n  biggestProb(a, n, k) {\r\n    let count = 0;\r\n    for (let i = 0; i < n; i++) if (Math.max(...a) == k) count += 1;\r\n\r\n    // find probability\r\n    this.setState({ chanceOfNumberInSequenceBiggestProb: count / n });\r\n  }\r\n  GetRangeOfNumbers = () => {\r\n    // console.log(this.state.finalValue,this.state.initialValue)\r\n    this.state.finalArry = [];\r\n    for (let i = this.state.initialValue; i <= this.state.finalValue; i++) {\r\n      this.state.finalArry.push(\r\n        Math.floor(Math.random() * this.state.finalValue ) + 5/*this.state.initialValue*/)\r\n    }\r\n    // console.log(Math.random() * (this.state.finalValue - this.state.initialValue) + this.state.initialValue);\r\n\r\n    this.setState(this.state.finalArry);\r\n    // console.log(this.state.finalArry);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      randomNumArray,\r\n      consectiveNumbers,\r\n      avgOfConsectiveNumbers,\r\n      evenNumber,\r\n      oddNumber,\r\n      primeNumber,\r\n      inputValue,\r\n      initialValue,\r\n      finalValue,\r\n      chanceOfNumberInSequence,\r\n      chanceOfNumberInSequenceProb,\r\n      chanceOfNumberInSequenceSmallest,\r\n      chanceOfNumberInSequenceSmallestProb,\r\n      chanceOfNumberInSequenceBiggest,\r\n      chanceOfNumberInSequenceBiggestProb,\r\n      sumOfRandomNumber,\r\n      Qe,\r\n      percentageOfEven,\r\n      Qo,\r\n      percentageOfOdd,\r\n    } = this.state;\r\n    return (\r\n      <div style={{ paddingTop: \"2rem\" }}>\r\n        <div>\r\n          <label>\r\n            {\" \"}\r\n            <b>Select Range of numbers :</b>{\" \"}\r\n          </label>\r\n          <br />\r\n          <br />\r\n          <label>\r\n            {\" \"}\r\n            <b>Select initial number :</b>{\" \"}\r\n          </label>\r\n          <input type='number' onChange={this.handleInitialValue}></input>\r\n          <label>\r\n            {\" \"}\r\n            <b>Select Final number :</b>{\" \"}\r\n          </label>\r\n          <input type='number' onChange={this.handleFinalValue}></input>\r\n          {/* <button onClick={this.GetRangeOfNumbers}>\r\n       Get Range of numbers\r\n        </button> */}\r\n        </div>\r\n        <div></div>\r\n        <label>\r\n          {\" \"}\r\n          <b>How many Column number do you want :</b>{\" \"}\r\n        </label>\r\n        <input type='number' onChange={this.handleinputColumnNumber}></input>\r\n        <br />\r\n        <label>\r\n          {\" \"}\r\n          <b> how many rows/ sequences/ series do you want?</b>{\" \"}\r\n        </label>\r\n        <input type='number' onChange={this.handleChangeForInput}></input>\r\n        <br />\r\n        <label>\r\n          {\" \"}\r\n          <b>How many even numbers do you want (At least):</b>{\" \"}\r\n        </label>\r\n        {this.state.inputColumnNumber==1 ?  <input type='number' disabled onChange={this.handleinputEvenNumber}></input>:<input type='number' onChange={this.handleinputEvenNumber}></input>}\r\n        <br />\r\n        {/* inputColumnNumber */}\r\n        <label>\r\n          {\" \"}\r\n          <b>How many Prime numbers do you want (At least):</b>{\" \"}\r\n        </label>\r\n        {this.state.inputColumnNumber==1 ? <input disabled type='number' onChange={this.handleinputPrimeNumber}></input>:<input type='number' onChange={this.handleinputPrimeNumber}></input>}\r\n        <br />\r\n      \r\n        <button onClick={() => this.handleCahngeforRandom(inputValue)}>\r\n          Get Resultsnpx\r\n        </button>\r\n        <br /> Random Number :{/* {console.log(this.state.FarrayOfObject)} */}\r\n        <br />\r\n\r\n        {/* {this.state.FarrayOfObject.length > 0 ? <ColumnLables length={this.state.FarrayOfObject[0]} /> : \"\"} */}\r\n\r\n\r\n        {/* <div>\r\n        {this.state.FarrayOfObject &&\r\n          this.state.FarrayOfObject.map((item, index) => {\r\n            if(index<1){\r\n              return <p key={index}></p>;\r\n            }\r\n\r\n\r\n\r\n\r\n          })\r\n          }\r\n        </div> */}\r\n        {this.state.FarrayOfObject &&\r\n          this.state.FarrayOfObject.map((item, index) => {\r\n            return (\r\n\r\n\r\n              <div key={index}>\r\n                <p key={item[index]}> <span   >Row No : {index + 1} -----{\">\"} </span>{item.map((num, ind) => {\r\n                  return <span key={ind}>{num} {\", \"}</span>\r\n\r\n                })}</p>\r\n\r\n\r\n              </div>\r\n\r\n            );\r\n          })}\r\n        {/* {this.state.FarrayOfObject.map((item, index) => {\r\n        <p>\r\n\r\n\r\n\r\n          {forEach(item, (value, key) => {\r\n                  return (\r\n                    <div key={key}>\r\n                      <label>\r\n                        {\" \"}\r\n                        <b>{key} :</b>{\" \"}\r\n                      </label>\r\n                      <br />\r\n                      <label>\r\n                        {\" \"}\r\n                        <b>{value}</b>{\" \"}\r\n                      </label>\r\n                      <br />\r\n                    </div>\r\n                  );\r\n                }\r\n                )}\r\n<p><span> {index+1 +\" \"}</span> {item[0]+\" ,\"+item[1]+\" ,\"+item[2]+\" ,\"+item[3]+\" ,\"+item[4]}</p>\r\n        {for(let i=0;i<item.length;i++){\r\n            {item[i]}\r\n          }\r\n          )}\r\n          {console.log(item)}\r\n        </p>\r\n        })} */}\r\n        {/* {randomNumArray} */}\r\n        {/* <br /> AVG Of Random :{\" \"}\r\n        {sumOfRandomNumber === 0 ? \"\" : sumOfRandomNumber}\r\n        <h2>Consective Numbers difference</h2>\r\n        <h2>{consectiveNumbers}</h2> AVG Of Random :{\" \"}\r\n        {sumOfRandomNumber === 0 ? \"\" : sumOfRandomNumber}\r\n        <h2>Avarage of Consective Numbers</h2>\r\n        <h2>{avgOfConsectiveNumbers.toFixed(2)}</h2>\r\n        Even Numbers : {evenNumber}\r\n        <br /> */}\r\n        {/* Quentity of Even number : {Qe === 0 ? \"\" : Qe}\r\n        <br />\r\n        Percentage of even number :{\" \"}\r\n        {percentageOfEven === 0 ? \"\" : `${percentageOfEven} %`}\r\n        <br />\r\n        Odd Numbers : {oddNumber}\r\n        <br /> */}\r\n        {/* Quentity of odd number : {Qo === 0 ? \"\" : Qo} */}\r\n        {/* <br />\r\n        Percentage of odd number :{\" \"} */}\r\n        {/* {percentageOfOdd === 0 ? \"\" : `${percentageOfOdd} %`}\r\n        Prime Numbers:{primeNumber}\r\n        <br />\r\n        <label> Chance of a number :</label>\r\n        <input\r\n          type='number'\r\n          onChange={this.handleChanceOfNumberInSequence}\r\n        ></input>\r\n        <button\r\n          onClick={() =>\r\n            this.kPresentProbability(\r\n              this.state.finalArry,\r\n              this.state.finalArry.length,\r\n              chanceOfNumberInSequence\r\n            )\r\n          }\r\n        >\r\n          ok\r\n        </button>\r\n        {\" \" + chanceOfNumberInSequenceProb} */}\r\n        <br></br>\r\n        {/* <label> Chance of a number be the smallest :</label>\r\n        <input\r\n          type='number'\r\n          onChange={this.handleChanceOfNumberSmallest}\r\n        ></input> */}\r\n        {/* <button\r\n          onClick={() =>\r\n            this.smallestProb(\r\n              this.state.finalArry,\r\n              this.state.finalArry.length,\r\n              chanceOfNumberInSequenceSmallest\r\n            )\r\n          }\r\n        >\r\n          ok\r\n        </button> */}\r\n        {/* {\" \" + chanceOfNumberInSequenceSmallestProb}\r\n        <br />\r\n        <label> Chance of a number be the Biggest :</label>\r\n        <input\r\n          type='number'\r\n          onChange={this.handleChanceOfNumberBiggest}\r\n        ></input>\r\n        <button\r\n          onClick={() =>\r\n            this.biggestProb(\r\n              this.state.finalArry,\r\n              this.state.finalArry.length,\r\n              chanceOfNumberInSequenceBiggest\r\n            )\r\n          }\r\n        >\r\n          ok\r\n        </button>\r\n        {chanceOfNumberInSequenceBiggestProb}\r\n        <br />\r\n        Sum of all numbers\r\n        <h2>\r\n          {this.state.finalArry.reduce((partialSum, a) => partialSum + a, 0)}\r\n        </h2> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default random;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}