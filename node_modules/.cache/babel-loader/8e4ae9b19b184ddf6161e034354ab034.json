{"ast":null,"code":"var _jsxFileName = \"E:\\\\Geeks Valley\\\\React Native\\\\Web Github\\\\RandomNumber\\\\src\\\\pages\\\\random.js\";\nimport React, { Component } from \"react\";\nimport ColumnLables from \"../components/ColumnLables\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass random extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      randomNumArray: [],\n      consectiveNumbers: [],\n      FarrayOfObject: [],\n      finalArry: [],\n      myarr: [],\n      evenNumber: [],\n      oddNumber: [],\n      primeNumber: [],\n      inputColumnNumber: 1,\n      inputValue: 0,\n      initialValue: 0,\n      finalValue: 0,\n      inputEvenNumber: 0,\n      inputPrimeNumber: 0,\n      sumOfRandomNumber: 0,\n      Qe: 0,\n      Qo: 0,\n      percentageOfEven: 0,\n      percentageOfOdd: 0,\n      avgOfConsectiveNumbers: 0,\n      chanceOfNumberInSequence: 0,\n      chanceOfNumberInSequenceProb: 0,\n      chanceOfNumberSmallest: 0,\n      chanceOfNumberInSequenceSmallestProb: 0,\n      chanceOfNumberBiggest: 0,\n      chanceOfNumberInSequenceBiggestProb: 0,\n      consecutiveDiff: [],\n      sumOfRows: []\n    };\n\n    this.getRandonNumbers = noOfRandomNos => {\n      var arr = [];\n\n      while (arr.length < this.state.finalValue) {\n        var r = Math.floor(Math.random() * this.state.finalValue) + 5\n        /*this.state.initialValue*/\n        ;\n        if (arr.indexOf(r) === -1) arr.push(r);\n      }\n\n      var evens = arr.filter(number => number % 2 == 0 && number !== 0 && number >= this.state.inputEvenNumber);\n      const evenNumbersToPush = evens.slice(0, this.state.inputEvenNumber);\n      var primeNumbers = this.findPrimeNumber(arr);\n      const primeNumbersToPush = primeNumbers.slice(0, this.state.inputPrimeNumber);\n      var arrToPush = [];\n      evenNumbersToPush.forEach(element => {\n        arrToPush.push(element);\n      });\n      primeNumbersToPush.forEach(element => {\n        arrToPush.push(element);\n      });\n      var oldArray = arr.filter(x => !new Set(arrToPush).has(x));\n      arrToPush = arrToPush.slice(0, this.state.inputColumnNumber);\n      oldArray.forEach(element => {\n        if (arrToPush.length < noOfRandomNos) arrToPush.push(element);\n      });\n      let sortednumbers = arrToPush.sort((a, b) => a - b).join(\",\");\n      var arrayOfObject = [];\n      arrayOfObject.push(sortednumbers);\n      return arrayOfObject;\n    };\n\n    this.handleCahngeforRandom = val => {\n      if (this.state.inputColumnNumber == 1 || this.state.inputColumnNumber == 5 || this.state.inputColumnNumber == 6) {}\n    };\n\n    this.avg = arr => {\n      let average = arr.reduce((a, b) => a + b, 0) / arr.length;\n      this.setState({\n        sumOfRandomNumber: parseInt(average)\n      });\n    };\n\n    this.diff = ary => {\n      var newA = [];\n\n      for (var i = 1; i < ary.length; i++) newA.push(ary[i] - ary[i - 1]);\n\n      const sumOfConsecutiveNos = newA.reduce((a, b) => a + b, 0);\n      const avgOfConsectiveNumberTemp = sumOfConsecutiveNos / newA.length || 0;\n      this.setState({\n        consectiveNumbers: newA.join(\",\"),\n        consective: newA,\n        avgOfConsectiveNumbers: avgOfConsectiveNumberTemp\n      });\n      return newA;\n    };\n\n    this.even = arr => {\n      let even = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n          even.push(arr[i]);\n        }\n\n        this.setState({\n          evenNumber: even.join(\",\")\n        });\n      }\n\n      let percentage = parseInt(even.length / arr.length * 100);\n      this.setState({\n        Qe: even.length,\n        percentageOfEven: percentage\n      }); // console.log(percentage);\n    };\n\n    this.odd = arr => {\n      let odd = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 !== 0) {\n          odd.push(arr[i]);\n        }\n\n        this.setState({\n          oddNumber: odd.join(\",\")\n        });\n      }\n\n      let percentage = parseInt(odd.length / arr.length * 100);\n      this.setState({\n        Qo: odd.length,\n        percentageOfOdd: percentage\n      });\n    };\n\n    this.findPrimeNumber = arr => {\n      let prime = [];\n      arr.forEach(num => {\n        var isNum = this.isPrime(num);\n\n        if (isNum && num >= this.state.inputPrimeNumber) {\n          prime.push(num);\n        }\n      });\n      return prime;\n    };\n\n    this.isPrime = num => {\n      for (var i = 2; i < num; i++) if (num % i === 0) return false;\n\n      return num > 1;\n    };\n\n    this.handleChangeForInput = e => {\n      this.setState({\n        inputValue: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleInitialValue = e => {\n      this.setState({\n        initialValue: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleFinalValue = e => {\n      this.setState({\n        finalValue: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleinputEvenNumber = e => {\n      this.setState({\n        inputEvenNumber: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleinputPrimeNumber = e => {\n      this.setState({\n        inputPrimeNumber: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleinputColumnNumber = e => {\n      this.setState({\n        inputColumnNumber: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleChanceOfNumberInSequence = e => {\n      this.setState({\n        chanceOfNumberInSequence: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleChanceOfNumberSmallest = e => {\n      this.setState({\n        chanceOfNumberInSequenceSmallest: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.handleChanceOfNumberBiggest = e => {\n      this.setState({\n        chanceOfNumberInSequenceBiggest: parseInt(e.target.value)\n      }, () => {});\n    };\n\n    this.GetRangeOfNumbers = () => {\n      // console.log(this.state.finalValue,this.state.initialValue)\n      this.state.finalArry = [];\n\n      for (let i = this.state.initialValue; i <= this.state.finalValue; i++) {\n        this.state.finalArry.push(Math.floor(Math.random() * this.state.finalValue) + 5\n        /*this.state.initialValue*/\n        );\n      } // console.log(Math.random() * (this.state.finalValue - this.state.initialValue) + this.state.initialValue);\n\n\n      this.setState(this.state.finalArry); // console.log(this.state.finalArry);\n    };\n  }\n\n  checkPrime(number) {\n    // console.log(number);\n    if (number <= 1) {\n      return false;\n    } else {\n      for (let k = 2; k < number; k++) {\n        if (number % k == 0) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  kPresentProbability(a, n, k) {\n    let count = 0;\n\n    for (let i = 0; i < n; i++) if (a[i] == k) count += 1; // find probability\n\n\n    this.setState({\n      chanceOfNumberInSequenceProb: count / n\n    });\n  }\n\n  smallestProb(a, n, k) {\n    let count = 0;\n\n    for (let i = 0; i < n; i++) if (Math.min(...a) == k) count += 1; // find probability\n\n\n    this.setState({\n      chanceOfNumberInSequenceSmallestProb: count / n\n    });\n  }\n\n  biggestProb(a, n, k) {\n    let count = 0;\n\n    for (let i = 0; i < n; i++) if (Math.max(...a) == k) count += 1; // find probability\n\n\n    this.setState({\n      chanceOfNumberInSequenceBiggestProb: count / n\n    });\n  }\n\n  render() {\n    const {\n      randomNumArray,\n      consectiveNumbers,\n      avgOfConsectiveNumbers,\n      evenNumber,\n      oddNumber,\n      primeNumber,\n      inputValue,\n      initialValue,\n      finalValue,\n      chanceOfNumberInSequence,\n      chanceOfNumberInSequenceProb,\n      chanceOfNumberInSequenceSmallest,\n      chanceOfNumberInSequenceSmallestProb,\n      chanceOfNumberInSequenceBiggest,\n      chanceOfNumberInSequenceBiggestProb,\n      sumOfRandomNumber,\n      Qe,\n      percentageOfEven,\n      Qo,\n      percentageOfOdd\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingTop: \"2rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Select Range of numbers :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Select initial number :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          onChange: this.handleInitialValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Select Final number :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          onChange: this.handleFinalValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"How many Column number do you want :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: this.handleinputColumnNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \" how many rows/ sequences/ series do you want?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: this.handleChangeForInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"How many even numbers do you want (At least):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), this.state.inputColumnNumber == 1 ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        disabled: true,\n        onChange: this.handleinputEvenNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 45\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: this.handleinputEvenNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 122\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"How many Prime numbers do you want (At least):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), this.state.inputColumnNumber == 1 ? /*#__PURE__*/_jsxDEV(\"input\", {\n        disabled: true,\n        type: \"number\",\n        onChange: this.handleinputPrimeNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 44\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: this.handleinputPrimeNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 122\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleCahngeforRandom(inputValue),\n        children: \"Get Resultsnpx\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), \" Random Number :\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), this.state.FarrayOfObject && this.state.FarrayOfObject.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Row No : \", index + 1, \" -----\", \">\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 39\n            }, this), item.map((num, ind) => {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [num, \" \", \", \"]\n              }, ind, true, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 26\n              }, this);\n            })]\n          }, item[index], true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Consecutive Defference :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), this.state.consecutiveDiff && this.state.consecutiveDiff.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Row No : \", index + 1, \" -----\", \">\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 39\n            }, this), item.map((num, ind) => {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [num, \" \", \", \"]\n              }, ind, true, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 26\n              }, this);\n            })]\n          }, item[index], true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Sum  :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), this.state.sumOfRows && this.state.sumOfRows.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Row No : \", index + 1, \" -----\", \">\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 32\n            }, this), item]\n          }, item, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default random;","map":{"version":3,"names":["React","Component","ColumnLables","random","state","randomNumArray","consectiveNumbers","FarrayOfObject","finalArry","myarr","evenNumber","oddNumber","primeNumber","inputColumnNumber","inputValue","initialValue","finalValue","inputEvenNumber","inputPrimeNumber","sumOfRandomNumber","Qe","Qo","percentageOfEven","percentageOfOdd","avgOfConsectiveNumbers","chanceOfNumberInSequence","chanceOfNumberInSequenceProb","chanceOfNumberSmallest","chanceOfNumberInSequenceSmallestProb","chanceOfNumberBiggest","chanceOfNumberInSequenceBiggestProb","consecutiveDiff","sumOfRows","getRandonNumbers","noOfRandomNos","arr","length","r","Math","floor","indexOf","push","evens","filter","number","evenNumbersToPush","slice","primeNumbers","findPrimeNumber","primeNumbersToPush","arrToPush","forEach","element","oldArray","x","Set","has","sortednumbers","sort","a","b","join","arrayOfObject","handleCahngeforRandom","val","avg","average","reduce","setState","parseInt","diff","ary","newA","i","sumOfConsecutiveNos","avgOfConsectiveNumberTemp","consective","even","percentage","odd","prime","num","isNum","isPrime","handleChangeForInput","e","target","value","handleInitialValue","handleFinalValue","handleinputEvenNumber","handleinputPrimeNumber","handleinputColumnNumber","handleChanceOfNumberInSequence","handleChanceOfNumberSmallest","chanceOfNumberInSequenceSmallest","handleChanceOfNumberBiggest","chanceOfNumberInSequenceBiggest","GetRangeOfNumbers","checkPrime","k","kPresentProbability","n","count","smallestProb","min","biggestProb","max","render","paddingTop","map","item","index","ind"],"sources":["E:/Geeks Valley/React Native/Web Github/RandomNumber/src/pages/random.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport ColumnLables from \"../components/ColumnLables\";\r\n\r\nclass random extends Component {\r\n  state = {\r\n    randomNumArray: [],\r\n    consectiveNumbers: [],\r\n    FarrayOfObject: [],\r\n    finalArry: [],\r\n    myarr: [],\r\n    evenNumber: [],\r\n    oddNumber: [],\r\n    primeNumber: [],\r\n    inputColumnNumber: 1,\r\n    inputValue: 0,\r\n    initialValue: 0,\r\n    finalValue: 0,\r\n    inputEvenNumber: 0,\r\n    inputPrimeNumber: 0,\r\n    sumOfRandomNumber: 0,\r\n    Qe: 0,\r\n    Qo: 0,\r\n    percentageOfEven: 0,\r\n    percentageOfOdd: 0,\r\n    avgOfConsectiveNumbers: 0,\r\n    chanceOfNumberInSequence: 0,\r\n    chanceOfNumberInSequenceProb: 0,\r\n    chanceOfNumberSmallest: 0,\r\n    chanceOfNumberInSequenceSmallestProb: 0,\r\n    chanceOfNumberBiggest: 0,\r\n    chanceOfNumberInSequenceBiggestProb: 0,\r\n    consecutiveDiff:[],\r\n    sumOfRows:[]\r\n  };\r\n\r\n  checkPrime(number) {\r\n    // console.log(number);\r\n    if (number <= 1) {\r\n      return false;\r\n    } else {\r\n      for (let k = 2; k < number; k++) {\r\n        if (number % k == 0) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n\r\n  getRandonNumbers = (noOfRandomNos) => {\r\n    var arr = [];\r\n    while (arr.length < this.state.finalValue ) {\r\n      var r = Math.floor(Math.random() * this.state.finalValue ) + 5/*this.state.initialValue*/;\r\n      if (arr.indexOf(r) === -1) arr.push(r);\r\n    }\r\n    var evens = arr.filter(number => number % 2 == 0 && number !== 0 && number >= this.state.inputEvenNumber);\r\n    const evenNumbersToPush = evens.slice(0,this.state.inputEvenNumber);\r\n    var primeNumbers = this.findPrimeNumber(arr);\r\n    const primeNumbersToPush = primeNumbers.slice(0, this.state.inputPrimeNumber);\r\n    var arrToPush = [];\r\n    evenNumbersToPush.forEach(element => {\r\n      arrToPush.push(element)\r\n    });\r\n    primeNumbersToPush.forEach(element => {\r\n      arrToPush.push(element)\r\n    });\r\n\r\n    var oldArray = arr.filter( x => ! new Set(arrToPush).has(x) )\r\n    arrToPush = arrToPush.slice(0, this.state.inputColumnNumber);\r\n    oldArray.forEach(element => {\r\n      if (arrToPush.length < noOfRandomNos)\r\n        arrToPush.push(element)\r\n    });\r\n    let sortednumbers = arrToPush.sort((a, b) => a - b).join(\",\");\r\n   \r\n    var arrayOfObject = [];\r\n    arrayOfObject.push(sortednumbers)\r\n    return arrayOfObject;\r\n  }\r\n\r\n  handleCahngeforRandom = (val) => {\r\n    if(this.state.inputColumnNumber==1 ||this.state.inputColumnNumber==5 ||this.state.inputColumnNumber==6){\r\n\r\n    }\r\n   \r\n  };\r\n\r\n  //  lableF=()=>{\r\n  //   for (let index = 0; index <this.state.inputColumnNumber; index++) {\r\n  //       <span>{index} </span>\r\n\r\n  //   }\r\n\r\n  avg = (arr) => {\r\n    let average = arr.reduce((a, b) => a + b, 0) / arr.length;\r\n    this.setState({ sumOfRandomNumber: parseInt(average) });\r\n  };\r\n\r\n  diff = (ary) => {\r\n    var newA = [];\r\n    for (var i = 1; i < ary.length; i++) newA.push(ary[i] - ary[i - 1]);\r\n    const sumOfConsecutiveNos = newA.reduce((a, b) => a + b, 0);\r\n    const avgOfConsectiveNumberTemp = sumOfConsecutiveNos / newA.length || 0;\r\n    this.setState({\r\n      consectiveNumbers: newA.join(\",\"),\r\n      consective: newA,\r\n      avgOfConsectiveNumbers: avgOfConsectiveNumberTemp,\r\n    });\r\n    return newA;\r\n  };\r\n\r\n  even = (arr) => {\r\n    let even = [];\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i] % 2 === 0) {\r\n        even.push(arr[i]);\r\n      }\r\n      this.setState({ evenNumber: even.join(\",\") });\r\n    }\r\n    let percentage = parseInt((even.length / arr.length) * 100);\r\n    this.setState({ Qe: even.length, percentageOfEven: percentage });\r\n    // console.log(percentage);\r\n  };\r\n  odd = (arr) => {\r\n    let odd = [];\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i] % 2 !== 0) {\r\n        odd.push(arr[i]);\r\n      }\r\n      this.setState({ oddNumber: odd.join(\",\") });\r\n    }\r\n    let percentage = parseInt((odd.length / arr.length) * 100);\r\n    this.setState({ Qo: odd.length, percentageOfOdd: percentage });\r\n  };\r\n\r\n  findPrimeNumber = (arr) => {\r\n    let prime = [];\r\n    arr.forEach((num) => {\r\n      var isNum = this.isPrime(num);\r\n      if (isNum && num >= this.state.inputPrimeNumber) {\r\n        prime.push(num);\r\n      }\r\n    });\r\n    return prime;\r\n  };\r\n\r\n  isPrime = (num) => {\r\n    for (var i = 2; i < num; i++) if (num % i === 0) return false;\r\n    return num > 1;\r\n  };\r\n\r\n  handleChangeForInput = (e) => {\r\n    this.setState({ inputValue: parseInt(e.target.value) }, () => { });\r\n  };\r\n  handleInitialValue = (e) => {\r\n    this.setState({ initialValue: parseInt(e.target.value) }, () => { });\r\n  };\r\n  handleFinalValue = (e) => {\r\n    this.setState({ finalValue: parseInt(e.target.value) }, () => { });\r\n  };\r\n\r\n  handleinputEvenNumber = (e) => {\r\n    this.setState({ inputEvenNumber: parseInt(e.target.value) }, () => { });\r\n  };\r\n  handleinputPrimeNumber = (e) => {\r\n    this.setState({ inputPrimeNumber: parseInt(e.target.value) }, () => { });\r\n  };\r\n  // handleinputColumnNumber\r\n  handleinputColumnNumber = (e) => {\r\n    this.setState({ inputColumnNumber: parseInt(e.target.value) }, () => { });\r\n  };\r\n\r\n  handleChanceOfNumberInSequence = (e) => {\r\n    this.setState(\r\n      { chanceOfNumberInSequence: parseInt(e.target.value) },\r\n      () => { }\r\n    );\r\n  };\r\n\r\n  handleChanceOfNumberSmallest = (e) => {\r\n    this.setState(\r\n      { chanceOfNumberInSequenceSmallest: parseInt(e.target.value) },\r\n      () => { }\r\n    );\r\n  };\r\n  handleChanceOfNumberBiggest = (e) => {\r\n    this.setState(\r\n      { chanceOfNumberInSequenceBiggest: parseInt(e.target.value) },\r\n      () => { }\r\n    );\r\n  };\r\n\r\n  kPresentProbability(a, n, k) {\r\n    let count = 0;\r\n    for (let i = 0; i < n; i++) if (a[i] == k) count += 1;\r\n\r\n    // find probability\r\n    this.setState({ chanceOfNumberInSequenceProb: count / n });\r\n  }\r\n  smallestProb(a, n, k) {\r\n    let count = 0;\r\n    for (let i = 0; i < n; i++) if (Math.min(...a) == k) count += 1;\r\n\r\n    // find probability\r\n    this.setState({ chanceOfNumberInSequenceSmallestProb: count / n });\r\n  }\r\n  biggestProb(a, n, k) {\r\n    let count = 0;\r\n    for (let i = 0; i < n; i++) if (Math.max(...a) == k) count += 1;\r\n\r\n    // find probability\r\n    this.setState({ chanceOfNumberInSequenceBiggestProb: count / n });\r\n  }\r\n  GetRangeOfNumbers = () => {\r\n    // console.log(this.state.finalValue,this.state.initialValue)\r\n    this.state.finalArry = [];\r\n    for (let i = this.state.initialValue; i <= this.state.finalValue; i++) {\r\n      this.state.finalArry.push(\r\n        Math.floor(Math.random() * this.state.finalValue ) + 5/*this.state.initialValue*/)\r\n    }\r\n    // console.log(Math.random() * (this.state.finalValue - this.state.initialValue) + this.state.initialValue);\r\n\r\n    this.setState(this.state.finalArry);\r\n    // console.log(this.state.finalArry);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      randomNumArray,\r\n      consectiveNumbers,\r\n      avgOfConsectiveNumbers,\r\n      evenNumber,\r\n      oddNumber,\r\n      primeNumber,\r\n      inputValue,\r\n      initialValue,\r\n      finalValue,\r\n      chanceOfNumberInSequence,\r\n      chanceOfNumberInSequenceProb,\r\n      chanceOfNumberInSequenceSmallest,\r\n      chanceOfNumberInSequenceSmallestProb,\r\n      chanceOfNumberInSequenceBiggest,\r\n      chanceOfNumberInSequenceBiggestProb,\r\n      sumOfRandomNumber,\r\n      Qe,\r\n      percentageOfEven,\r\n      Qo,\r\n      percentageOfOdd,\r\n    } = this.state;\r\n    return (\r\n      <div style={{ paddingTop: \"2rem\" }}>\r\n        <div>\r\n          <label>\r\n            {\" \"}\r\n            <b>Select Range of numbers :</b>{\" \"}\r\n          </label>\r\n          <br />\r\n          <br />\r\n          <label>\r\n            {\" \"}\r\n            <b>Select initial number :</b>{\" \"}\r\n          </label>\r\n          <input type='number' onChange={this.handleInitialValue}></input>\r\n          <label>\r\n            {\" \"}\r\n            <b>Select Final number :</b>{\" \"}\r\n          </label>\r\n          <input type='number' onChange={this.handleFinalValue}></input>\r\n          {/* <button onClick={this.GetRangeOfNumbers}>\r\n       Get Range of numbers\r\n        </button> */}\r\n        </div>\r\n        <div></div>\r\n        <label>\r\n          {\" \"}\r\n          <b>How many Column number do you want :</b>{\" \"}\r\n        </label>\r\n        <input type='number' onChange={this.handleinputColumnNumber}></input>\r\n        <br />\r\n        <label>\r\n          {\" \"}\r\n          <b> how many rows/ sequences/ series do you want?</b>{\" \"}\r\n        </label>\r\n        <input type='number' onChange={this.handleChangeForInput}></input>\r\n        <br />\r\n        <label>\r\n          {\" \"}\r\n          <b>How many even numbers do you want (At least):</b>{\" \"}\r\n        </label>\r\n        {this.state.inputColumnNumber==1 ?  <input type='number' disabled onChange={this.handleinputEvenNumber}></input>:<input type='number' onChange={this.handleinputEvenNumber}></input>}\r\n        <br />\r\n        {/* inputColumnNumber */}\r\n        <label>\r\n          {\" \"}\r\n          <b>How many Prime numbers do you want (At least):</b>{\" \"}\r\n        </label>\r\n        {this.state.inputColumnNumber==1 ? <input disabled type='number' onChange={this.handleinputPrimeNumber}></input>:<input type='number' onChange={this.handleinputPrimeNumber}></input>}\r\n        <br />\r\n      \r\n        <button onClick={() => this.handleCahngeforRandom(inputValue)}>\r\n          Get Resultsnpx\r\n        </button>\r\n        <br /> Random Number :{/* {console.log(this.state.FarrayOfObject)} */}\r\n        <br />\r\n\r\n        {/* {this.state.FarrayOfObject.length > 0 ? <ColumnLables length={this.state.FarrayOfObject[0]} /> : \"\"} */}\r\n\r\n\r\n        {/* <div>\r\n        {this.state.FarrayOfObject &&\r\n          this.state.FarrayOfObject.map((item, index) => {\r\n            if(index<1){\r\n              return <p key={index}></p>;\r\n            }\r\n\r\n\r\n\r\n\r\n          })\r\n          }\r\n        </div> */}\r\n        {this.state.FarrayOfObject &&\r\n          this.state.FarrayOfObject.map((item, index) => {\r\n            return (\r\n\r\n\r\n              <div key={index}>\r\n                <p key={item[index]}> <span   >Row No : {index + 1} -----{\">\"} </span>{item.map((num, ind) => {\r\n                  return <span key={ind}>{num} {\", \"}</span>\r\n\r\n                })}</p>\r\n\r\n\r\n              </div>\r\n\r\n            );\r\n          })}\r\n          <br/>\r\n           <div></div>\r\n        <label>\r\n          {\" \"}\r\n          <b>Consecutive Defference :</b>{\" \"}\r\n        </label>\r\n        {this.state.consecutiveDiff &&\r\n          this.state.consecutiveDiff.map((item, index) => {\r\n            return (\r\n\r\n              <div key={index}>\r\n                <p key={item[index]}> <span   >Row No : {index + 1} -----{\">\"} </span>{item.map((num, ind) => {\r\n                  return <span key={ind}>{num} {\", \"}</span>\r\n\r\n                })}</p>\r\n\r\n\r\n              </div>\r\n\r\n            );\r\n          })}\r\n           <div></div>\r\n        <label>\r\n          {\" \"}\r\n          <b>Sum  :</b>{\" \"}\r\n        </label>\r\n        {this.state.sumOfRows &&\r\n          this.state.sumOfRows.map((item, index) => {\r\n            return (\r\n\r\n              <div key={index}>\r\n                <p key={item}> <span   >Row No : {index + 1} -----{\">\"} </span>{item}</p>\r\n\r\n\r\n              </div>\r\n\r\n            );\r\n          })}\r\n      \r\n        {/* {this.state.FarrayOfObject.map((item, index) => {\r\n        <p>\r\n\r\n\r\n\r\n          {forEach(item, (value, key) => {\r\n                  return (\r\n                    <div key={key}>\r\n                      <label>\r\n                        {\" \"}\r\n                        <b>{key} :</b>{\" \"}\r\n                      </label>\r\n                      <br />\r\n                      <label>\r\n                        {\" \"}\r\n                        <b>{value}</b>{\" \"}\r\n                      </label>\r\n                      <br />\r\n                    </div>\r\n                  );\r\n                }\r\n                )}\r\n<p><span> {index+1 +\" \"}</span> {item[0]+\" ,\"+item[1]+\" ,\"+item[2]+\" ,\"+item[3]+\" ,\"+item[4]}</p>\r\n        {for(let i=0;i<item.length;i++){\r\n            {item[i]}\r\n          }\r\n          )}\r\n          {console.log(item)}\r\n        </p>\r\n        })} */}\r\n        {/* {randomNumArray} */}\r\n        {/* <br /> AVG Of Random :{\" \"}\r\n        {sumOfRandomNumber === 0 ? \"\" : sumOfRandomNumber}\r\n        <h2>Consective Numbers difference</h2>\r\n        <h2>{consectiveNumbers}</h2> AVG Of Random :{\" \"}\r\n        {sumOfRandomNumber === 0 ? \"\" : sumOfRandomNumber}\r\n        <h2>Avarage of Consective Numbers</h2>\r\n        <h2>{avgOfConsectiveNumbers.toFixed(2)}</h2>\r\n        Even Numbers : {evenNumber}\r\n        <br /> */}\r\n        {/* Quentity of Even number : {Qe === 0 ? \"\" : Qe}\r\n        <br />\r\n        Percentage of even number :{\" \"}\r\n        {percentageOfEven === 0 ? \"\" : `${percentageOfEven} %`}\r\n        <br />\r\n        Odd Numbers : {oddNumber}\r\n        <br /> */}\r\n        {/* Quentity of odd number : {Qo === 0 ? \"\" : Qo} */}\r\n        {/* <br />\r\n        Percentage of odd number :{\" \"} */}\r\n        {/* {percentageOfOdd === 0 ? \"\" : `${percentageOfOdd} %`}\r\n        Prime Numbers:{primeNumber}\r\n        <br />\r\n        <label> Chance of a number :</label>\r\n        <input\r\n          type='number'\r\n          onChange={this.handleChanceOfNumberInSequence}\r\n        ></input>\r\n        <button\r\n          onClick={() =>\r\n            this.kPresentProbability(\r\n              this.state.finalArry,\r\n              this.state.finalArry.length,\r\n              chanceOfNumberInSequence\r\n            )\r\n          }\r\n        >\r\n          ok\r\n        </button>\r\n        {\" \" + chanceOfNumberInSequenceProb} */}\r\n        <br></br>\r\n        {/* <label> Chance of a number be the smallest :</label>\r\n        <input\r\n          type='number'\r\n          onChange={this.handleChanceOfNumberSmallest}\r\n        ></input> */}\r\n        {/* <button\r\n          onClick={() =>\r\n            this.smallestProb(\r\n              this.state.finalArry,\r\n              this.state.finalArry.length,\r\n              chanceOfNumberInSequenceSmallest\r\n            )\r\n          }\r\n        >\r\n          ok\r\n        </button> */}\r\n        {/* {\" \" + chanceOfNumberInSequenceSmallestProb}\r\n        <br />\r\n        <label> Chance of a number be the Biggest :</label>\r\n        <input\r\n          type='number'\r\n          onChange={this.handleChanceOfNumberBiggest}\r\n        ></input>\r\n        <button\r\n          onClick={() =>\r\n            this.biggestProb(\r\n              this.state.finalArry,\r\n              this.state.finalArry.length,\r\n              chanceOfNumberInSequenceBiggest\r\n            )\r\n          }\r\n        >\r\n          ok\r\n        </button>\r\n        {chanceOfNumberInSequenceBiggestProb}\r\n        <br />\r\n        Sum of all numbers\r\n        <h2>\r\n          {this.state.finalArry.reduce((partialSum, a) => partialSum + a, 0)}\r\n        </h2> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default random;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}